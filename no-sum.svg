<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="742" onload="init(evt)" viewBox="0 0 1200 742" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="742" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="725.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="725.00"> </text><svg id="frames" x="10" width="1180" total_samples="876"><g><title>perf-exec (5 samples, 0.57%)</title><rect x="0.0000%" y="677" width="0.5708%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="5"/><text x="0.2500%" y="687.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 0.57%)</title><rect x="0.0000%" y="661" width="0.5708%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="5"/><text x="0.2500%" y="671.50"></text></g><g><title>do_syscall_64 (5 samples, 0.57%)</title><rect x="0.0000%" y="645" width="0.5708%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="5"/><text x="0.2500%" y="655.50"></text></g><g><title>__x64_sys_execve (5 samples, 0.57%)</title><rect x="0.0000%" y="629" width="0.5708%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="5"/><text x="0.2500%" y="639.50"></text></g><g><title>do_execveat_common.isra.0 (5 samples, 0.57%)</title><rect x="0.0000%" y="613" width="0.5708%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="5"/><text x="0.2500%" y="623.50"></text></g><g><title>bprm_execve (5 samples, 0.57%)</title><rect x="0.0000%" y="597" width="0.5708%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="5"/><text x="0.2500%" y="607.50"></text></g><g><title>exec_binprm (5 samples, 0.57%)</title><rect x="0.0000%" y="581" width="0.5708%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="5"/><text x="0.2500%" y="591.50"></text></g><g><title>load_elf_binary (5 samples, 0.57%)</title><rect x="0.0000%" y="565" width="0.5708%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="5"/><text x="0.2500%" y="575.50"></text></g><g><title>begin_new_exec (5 samples, 0.57%)</title><rect x="0.0000%" y="549" width="0.5708%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="5"/><text x="0.2500%" y="559.50"></text></g><g><title>perf_event_exec (5 samples, 0.57%)</title><rect x="0.0000%" y="533" width="0.5708%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="5"/><text x="0.2500%" y="543.50"></text></g><g><title>ctx_resched (5 samples, 0.57%)</title><rect x="0.0000%" y="517" width="0.5708%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="5"/><text x="0.2500%" y="527.50"></text></g><g><title>perf_pmu_enable.part.0 (5 samples, 0.57%)</title><rect x="0.0000%" y="501" width="0.5708%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="5"/><text x="0.2500%" y="511.50"></text></g><g><title>x86_pmu_enable (5 samples, 0.57%)</title><rect x="0.0000%" y="485" width="0.5708%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="5"/><text x="0.2500%" y="495.50"></text></g><g><title>intel_pmu_enable_all (5 samples, 0.57%)</title><rect x="0.0000%" y="469" width="0.5708%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="5"/><text x="0.2500%" y="479.50"></text></g><g><title>native_write_msr (5 samples, 0.57%)</title><rect x="0.0000%" y="453" width="0.5708%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="5"/><text x="0.2500%" y="463.50"></text></g><g><title>&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.23%)</title><rect x="0.5708%" y="645" width="0.2283%" height="15" fill="rgb(231,73,38)" fg:x="5" fg:w="2"/><text x="0.8208%" y="655.50"></text></g><g><title>__GI___libc_free (1 samples, 0.11%)</title><rect x="0.7991%" y="645" width="0.1142%" height="15" fill="rgb(225,20,46)" fg:x="7" fg:w="1"/><text x="1.0491%" y="655.50"></text></g><g><title>__rdl_alloc (1 samples, 0.11%)</title><rect x="0.9132%" y="645" width="0.1142%" height="15" fill="rgb(210,31,41)" fg:x="8" fg:w="1"/><text x="1.1632%" y="655.50"></text></g><g><title>_int_malloc (2 samples, 0.23%)</title><rect x="1.0274%" y="645" width="0.2283%" height="15" fill="rgb(221,200,47)" fg:x="9" fg:w="2"/><text x="1.2774%" y="655.50"></text></g><g><title>regex::dfa::Fsm::next_state (7 samples, 0.80%)</title><rect x="1.2557%" y="645" width="0.7991%" height="15" fill="rgb(226,26,5)" fg:x="11" fg:w="7"/><text x="1.5057%" y="655.50"></text></g><g><title>regex::dfa::Fsm::start_flags_reverse (1 samples, 0.11%)</title><rect x="2.0548%" y="645" width="0.1142%" height="15" fill="rgb(249,33,26)" fg:x="18" fg:w="1"/><text x="2.3048%" y="655.50"></text></g><g><title>[[heap]] (17 samples, 1.94%)</title><rect x="0.5708%" y="661" width="1.9406%" height="15" fill="rgb(235,183,28)" fg:x="5" fg:w="17"/><text x="0.8208%" y="671.50">[..</text></g><g><title>unlink_chunk.isra.0 (3 samples, 0.34%)</title><rect x="2.1689%" y="645" width="0.3425%" height="15" fill="rgb(221,5,38)" fg:x="19" fg:w="3"/><text x="2.4189%" y="655.50"></text></g><g><title>_int_free (1 samples, 0.11%)</title><rect x="2.5114%" y="645" width="0.1142%" height="15" fill="rgb(247,18,42)" fg:x="22" fg:w="1"/><text x="2.7614%" y="655.50"></text></g><g><title>[[stack]] (2 samples, 0.23%)</title><rect x="2.5114%" y="661" width="0.2283%" height="15" fill="rgb(241,131,45)" fg:x="22" fg:w="2"/><text x="2.7614%" y="671.50"></text></g><g><title>std::sys::unix::fs::stat (1 samples, 0.11%)</title><rect x="2.6256%" y="645" width="0.1142%" height="15" fill="rgb(249,31,29)" fg:x="23" fg:w="1"/><text x="2.8756%" y="655.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.11%)</title><rect x="2.6256%" y="629" width="0.1142%" height="15" fill="rgb(225,111,53)" fg:x="23" fg:w="1"/><text x="2.8756%" y="639.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.11%)</title><rect x="2.6256%" y="613" width="0.1142%" height="15" fill="rgb(238,160,17)" fg:x="23" fg:w="1"/><text x="2.8756%" y="623.50"></text></g><g><title>statx (1 samples, 0.11%)</title><rect x="2.6256%" y="597" width="0.1142%" height="15" fill="rgb(214,148,48)" fg:x="23" fg:w="1"/><text x="2.8756%" y="607.50"></text></g><g><title>__entry_text_start (1 samples, 0.11%)</title><rect x="2.6256%" y="581" width="0.1142%" height="15" fill="rgb(232,36,49)" fg:x="23" fg:w="1"/><text x="2.8756%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (5 samples, 0.57%)</title><rect x="2.7397%" y="645" width="0.5708%" height="15" fill="rgb(209,103,24)" fg:x="24" fg:w="5"/><text x="2.9897%" y="655.50"></text></g><g><title>&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.80%)</title><rect x="3.3105%" y="645" width="0.7991%" height="15" fill="rgb(229,88,8)" fg:x="29" fg:w="7"/><text x="3.5605%" y="655.50"></text></g><g><title>&lt;regex::re_unicode::Split as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.46%)</title><rect x="4.1096%" y="645" width="0.4566%" height="15" fill="rgb(213,181,19)" fg:x="36" fg:w="4"/><text x="4.3596%" y="655.50"></text></g><g><title>__GI___libc_free (2 samples, 0.23%)</title><rect x="4.5662%" y="645" width="0.2283%" height="15" fill="rgb(254,191,54)" fg:x="40" fg:w="2"/><text x="4.8162%" y="655.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.11%)</title><rect x="4.7945%" y="645" width="0.1142%" height="15" fill="rgb(241,83,37)" fg:x="42" fg:w="1"/><text x="5.0445%" y="655.50"></text></g><g><title>__libc_open64 (1 samples, 0.11%)</title><rect x="4.9087%" y="645" width="0.1142%" height="15" fill="rgb(233,36,39)" fg:x="43" fg:w="1"/><text x="5.1587%" y="655.50"></text></g><g><title>__entry_text_start (1 samples, 0.11%)</title><rect x="4.9087%" y="629" width="0.1142%" height="15" fill="rgb(226,3,54)" fg:x="43" fg:w="1"/><text x="5.1587%" y="639.50"></text></g><g><title>_int_free (4 samples, 0.46%)</title><rect x="5.0228%" y="645" width="0.4566%" height="15" fill="rgb(245,192,40)" fg:x="44" fg:w="4"/><text x="5.2728%" y="655.50"></text></g><g><title>_int_malloc (2 samples, 0.23%)</title><rect x="5.4795%" y="645" width="0.2283%" height="15" fill="rgb(238,167,29)" fg:x="48" fg:w="2"/><text x="5.7295%" y="655.50"></text></g><g><title>malloc_consolidate (1 samples, 0.11%)</title><rect x="5.7078%" y="645" width="0.1142%" height="15" fill="rgb(232,182,51)" fg:x="50" fg:w="1"/><text x="5.9578%" y="655.50"></text></g><g><title>regex::dfa::Fsm::next_state (8 samples, 0.91%)</title><rect x="5.8219%" y="645" width="0.9132%" height="15" fill="rgb(231,60,39)" fg:x="51" fg:w="8"/><text x="6.0719%" y="655.50"></text></g><g><title>regex::dfa::Fsm::start_flags_reverse (3 samples, 0.34%)</title><rect x="6.7352%" y="645" width="0.3425%" height="15" fill="rgb(208,69,12)" fg:x="59" fg:w="3"/><text x="6.9852%" y="655.50"></text></g><g><title>[unknown] (40 samples, 4.57%)</title><rect x="2.7397%" y="661" width="4.5662%" height="15" fill="rgb(235,93,37)" fg:x="24" fg:w="40"/><text x="2.9897%" y="671.50">[unkn..</text></g><g><title>regex::exec::ExecNoSync::is_anchor_end_match::imp (2 samples, 0.23%)</title><rect x="7.0776%" y="645" width="0.2283%" height="15" fill="rgb(213,116,39)" fg:x="62" fg:w="2"/><text x="7.3276%" y="655.50"></text></g><g><title>&lt;std::fs::ReadDir as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.11%)</title><rect x="7.3059%" y="389" width="0.1142%" height="15" fill="rgb(222,207,29)" fg:x="64" fg:w="1"/><text x="7.5559%" y="399.50"></text></g><g><title>&lt;std::sys::unix::fs::ReadDir as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.11%)</title><rect x="7.3059%" y="373" width="0.1142%" height="15" fill="rgb(206,96,30)" fg:x="64" fg:w="1"/><text x="7.5559%" y="383.50"></text></g><g><title>__readdir64 (1 samples, 0.11%)</title><rect x="7.3059%" y="357" width="0.1142%" height="15" fill="rgb(218,138,4)" fg:x="64" fg:w="1"/><text x="7.5559%" y="367.50"></text></g><g><title>__GI___getdents64 (1 samples, 0.11%)</title><rect x="7.3059%" y="341" width="0.1142%" height="15" fill="rgb(250,191,14)" fg:x="64" fg:w="1"/><text x="7.5559%" y="351.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.11%)</title><rect x="7.3059%" y="325" width="0.1142%" height="15" fill="rgb(239,60,40)" fg:x="64" fg:w="1"/><text x="7.5559%" y="335.50"></text></g><g><title>do_syscall_64 (1 samples, 0.11%)</title><rect x="7.3059%" y="309" width="0.1142%" height="15" fill="rgb(206,27,48)" fg:x="64" fg:w="1"/><text x="7.5559%" y="319.50"></text></g><g><title>__x64_sys_getdents64 (1 samples, 0.11%)</title><rect x="7.3059%" y="293" width="0.1142%" height="15" fill="rgb(225,35,8)" fg:x="64" fg:w="1"/><text x="7.5559%" y="303.50"></text></g><g><title>iterate_dir (1 samples, 0.11%)</title><rect x="7.3059%" y="277" width="0.1142%" height="15" fill="rgb(250,213,24)" fg:x="64" fg:w="1"/><text x="7.5559%" y="287.50"></text></g><g><title>ext4_readdir (1 samples, 0.11%)</title><rect x="7.3059%" y="261" width="0.1142%" height="15" fill="rgb(247,123,22)" fg:x="64" fg:w="1"/><text x="7.5559%" y="271.50"></text></g><g><title>ext4_dx_readdir (1 samples, 0.11%)</title><rect x="7.3059%" y="245" width="0.1142%" height="15" fill="rgb(231,138,38)" fg:x="64" fg:w="1"/><text x="7.5559%" y="255.50"></text></g><g><title>call_filldir (1 samples, 0.11%)</title><rect x="7.3059%" y="229" width="0.1142%" height="15" fill="rgb(231,145,46)" fg:x="64" fg:w="1"/><text x="7.5559%" y="239.50"></text></g><g><title>filldir64 (1 samples, 0.11%)</title><rect x="7.3059%" y="213" width="0.1142%" height="15" fill="rgb(251,118,11)" fg:x="64" fg:w="1"/><text x="7.5559%" y="223.50"></text></g><g><title>memchr (1 samples, 0.11%)</title><rect x="7.3059%" y="197" width="0.1142%" height="15" fill="rgb(217,147,25)" fg:x="64" fg:w="1"/><text x="7.5559%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.23%)</title><rect x="7.3059%" y="421" width="0.2283%" height="15" fill="rgb(247,81,37)" fg:x="64" fg:w="2"/><text x="7.5559%" y="431.50"></text></g><g><title>&lt;walkdir::IntoIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.23%)</title><rect x="7.3059%" y="405" width="0.2283%" height="15" fill="rgb(209,12,38)" fg:x="64" fg:w="2"/><text x="7.5559%" y="415.50"></text></g><g><title>__GI___libc_free (1 samples, 0.11%)</title><rect x="7.4201%" y="389" width="0.1142%" height="15" fill="rgb(227,1,9)" fg:x="65" fg:w="1"/><text x="7.6701%" y="399.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.11%)</title><rect x="48.2877%" y="373" width="0.1142%" height="15" fill="rgb(248,47,43)" fg:x="423" fg:w="1"/><text x="48.5377%" y="383.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.11%)</title><rect x="48.2877%" y="357" width="0.1142%" height="15" fill="rgb(221,10,30)" fg:x="423" fg:w="1"/><text x="48.5377%" y="367.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.11%)</title><rect x="48.2877%" y="341" width="0.1142%" height="15" fill="rgb(210,229,1)" fg:x="423" fg:w="1"/><text x="48.5377%" y="351.50"></text></g><g><title>__softirqentry_text_start (1 samples, 0.11%)</title><rect x="48.2877%" y="325" width="0.1142%" height="15" fill="rgb(222,148,37)" fg:x="423" fg:w="1"/><text x="48.5377%" y="335.50"></text></g><g><title>rcu_core_si (1 samples, 0.11%)</title><rect x="48.2877%" y="309" width="0.1142%" height="15" fill="rgb(234,67,33)" fg:x="423" fg:w="1"/><text x="48.5377%" y="319.50"></text></g><g><title>rcu_core (1 samples, 0.11%)</title><rect x="48.2877%" y="293" width="0.1142%" height="15" fill="rgb(247,98,35)" fg:x="423" fg:w="1"/><text x="48.5377%" y="303.50"></text></g><g><title>rcu_do_batch (1 samples, 0.11%)</title><rect x="48.2877%" y="277" width="0.1142%" height="15" fill="rgb(247,138,52)" fg:x="423" fg:w="1"/><text x="48.5377%" y="287.50"></text></g><g><title>file_free_rcu (1 samples, 0.11%)</title><rect x="48.2877%" y="261" width="0.1142%" height="15" fill="rgb(213,79,30)" fg:x="423" fg:w="1"/><text x="48.5377%" y="271.50"></text></g><g><title>regex::dfa::Fsm::next_state (21 samples, 2.40%)</title><rect x="48.4018%" y="373" width="2.3973%" height="15" fill="rgb(246,177,23)" fg:x="424" fg:w="21"/><text x="48.6518%" y="383.50">re..</text></g><g><title>&lt;regex::re_unicode::Split as core::iter::traits::iterator::Iterator&gt;::next (325 samples, 37.10%)</title><rect x="14.6119%" y="405" width="37.1005%" height="15" fill="rgb(230,62,27)" fg:x="128" fg:w="325"/><text x="14.8619%" y="415.50">&lt;regex::re_unicode::Split as core::iter::traits::iterator::I..</text></g><g><title>&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (314 samples, 35.84%)</title><rect x="15.8676%" y="389" width="35.8447%" height="15" fill="rgb(216,154,8)" fg:x="139" fg:w="314"/><text x="16.1176%" y="399.50">&lt;regex::re_trait::Matches&lt;R&gt; as core::iter::traits::iterat..</text></g><g><title>regex::dfa::Fsm::start_flags_reverse (8 samples, 0.91%)</title><rect x="50.7991%" y="373" width="0.9132%" height="15" fill="rgb(244,35,45)" fg:x="445" fg:w="8"/><text x="51.0491%" y="383.50"></text></g><g><title>[libc-2.31.so] (27 samples, 3.08%)</title><rect x="51.7123%" y="405" width="3.0822%" height="15" fill="rgb(251,115,12)" fg:x="453" fg:w="27"/><text x="51.9623%" y="415.50">[li..</text></g><g><title>__GI___libc_free (9 samples, 1.03%)</title><rect x="54.7945%" y="405" width="1.0274%" height="15" fill="rgb(240,54,50)" fg:x="480" fg:w="9"/><text x="55.0445%" y="415.50"></text></g><g><title>_int_malloc (37 samples, 4.22%)</title><rect x="59.9315%" y="389" width="4.2237%" height="15" fill="rgb(233,84,52)" fg:x="525" fg:w="37"/><text x="60.1815%" y="399.50">_int_..</text></g><g><title>__GI___libc_malloc (74 samples, 8.45%)</title><rect x="55.8219%" y="405" width="8.4475%" height="15" fill="rgb(207,117,47)" fg:x="489" fg:w="74"/><text x="56.0719%" y="415.50">__GI___libc_..</text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.11%)</title><rect x="64.1553%" y="389" width="0.1142%" height="15" fill="rgb(249,43,39)" fg:x="562" fg:w="1"/><text x="64.4053%" y="399.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.11%)</title><rect x="64.1553%" y="373" width="0.1142%" height="15" fill="rgb(209,38,44)" fg:x="562" fg:w="1"/><text x="64.4053%" y="383.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.11%)</title><rect x="64.1553%" y="357" width="0.1142%" height="15" fill="rgb(236,212,23)" fg:x="562" fg:w="1"/><text x="64.4053%" y="367.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.11%)</title><rect x="64.1553%" y="341" width="0.1142%" height="15" fill="rgb(242,79,21)" fg:x="562" fg:w="1"/><text x="64.4053%" y="351.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.11%)</title><rect x="64.1553%" y="325" width="0.1142%" height="15" fill="rgb(211,96,35)" fg:x="562" fg:w="1"/><text x="64.4053%" y="335.50"></text></g><g><title>tick_sched_timer (1 samples, 0.11%)</title><rect x="64.1553%" y="309" width="0.1142%" height="15" fill="rgb(253,215,40)" fg:x="562" fg:w="1"/><text x="64.4053%" y="319.50"></text></g><g><title>tick_sched_handle.isra.0 (1 samples, 0.11%)</title><rect x="64.1553%" y="293" width="0.1142%" height="15" fill="rgb(211,81,21)" fg:x="562" fg:w="1"/><text x="64.4053%" y="303.50"></text></g><g><title>update_process_times (1 samples, 0.11%)</title><rect x="64.1553%" y="277" width="0.1142%" height="15" fill="rgb(208,190,38)" fg:x="562" fg:w="1"/><text x="64.4053%" y="287.50"></text></g><g><title>scheduler_tick (1 samples, 0.11%)</title><rect x="64.1553%" y="261" width="0.1142%" height="15" fill="rgb(235,213,38)" fg:x="562" fg:w="1"/><text x="64.4053%" y="271.50"></text></g><g><title>trigger_load_balance (1 samples, 0.11%)</title><rect x="64.1553%" y="245" width="0.1142%" height="15" fill="rgb(237,122,38)" fg:x="562" fg:w="1"/><text x="64.4053%" y="255.50"></text></g><g><title>__rdl_dealloc (2 samples, 0.23%)</title><rect x="64.2694%" y="405" width="0.2283%" height="15" fill="rgb(244,218,35)" fg:x="563" fg:w="2"/><text x="64.5194%" y="415.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2 samples, 0.23%)</title><rect x="64.2694%" y="389" width="0.2283%" height="15" fill="rgb(240,68,47)" fg:x="563" fg:w="2"/><text x="64.5194%" y="399.50"></text></g><g><title>__rust_alloc (1 samples, 0.11%)</title><rect x="64.4977%" y="405" width="0.1142%" height="15" fill="rgb(210,16,53)" fg:x="565" fg:w="1"/><text x="64.7477%" y="415.50"></text></g><g><title>__rust_dealloc (4 samples, 0.46%)</title><rect x="64.6119%" y="405" width="0.4566%" height="15" fill="rgb(235,124,12)" fg:x="566" fg:w="4"/><text x="64.8619%" y="415.50"></text></g><g><title>_int_free (17 samples, 1.94%)</title><rect x="65.0685%" y="405" width="1.9406%" height="15" fill="rgb(224,169,11)" fg:x="570" fg:w="17"/><text x="65.3185%" y="415.50">_..</text></g><g><title>malloc_consolidate (1 samples, 0.11%)</title><rect x="66.8950%" y="389" width="0.1142%" height="15" fill="rgb(250,166,2)" fg:x="586" fg:w="1"/><text x="67.1450%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (30 samples, 3.42%)</title><rect x="67.0091%" y="405" width="3.4247%" height="15" fill="rgb(242,216,29)" fg:x="587" fg:w="30"/><text x="67.2591%" y="415.50">cor..</text></g><g><title>[libc-2.31.so] (1 samples, 0.11%)</title><rect x="72.4886%" y="389" width="0.1142%" height="15" fill="rgb(230,116,27)" fg:x="635" fg:w="1"/><text x="72.7386%" y="399.50"></text></g><g><title>malloc_consolidate (3 samples, 0.34%)</title><rect x="72.8311%" y="357" width="0.3425%" height="15" fill="rgb(228,99,48)" fg:x="638" fg:w="3"/><text x="73.0811%" y="367.50"></text></g><g><title>sysmalloc (1 samples, 0.11%)</title><rect x="73.1735%" y="357" width="0.1142%" height="15" fill="rgb(253,11,6)" fg:x="641" fg:w="1"/><text x="73.4235%" y="367.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.11%)</title><rect x="73.1735%" y="341" width="0.1142%" height="15" fill="rgb(247,143,39)" fg:x="641" fg:w="1"/><text x="73.4235%" y="351.50"></text></g><g><title>exc_page_fault (1 samples, 0.11%)</title><rect x="73.1735%" y="325" width="0.1142%" height="15" fill="rgb(236,97,10)" fg:x="641" fg:w="1"/><text x="73.4235%" y="335.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.11%)</title><rect x="73.1735%" y="309" width="0.1142%" height="15" fill="rgb(233,208,19)" fg:x="641" fg:w="1"/><text x="73.4235%" y="319.50"></text></g><g><title>handle_mm_fault (1 samples, 0.11%)</title><rect x="73.1735%" y="293" width="0.1142%" height="15" fill="rgb(216,164,2)" fg:x="641" fg:w="1"/><text x="73.4235%" y="303.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.11%)</title><rect x="73.1735%" y="277" width="0.1142%" height="15" fill="rgb(220,129,5)" fg:x="641" fg:w="1"/><text x="73.4235%" y="287.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.80%)</title><rect x="72.6027%" y="389" width="0.7991%" height="15" fill="rgb(242,17,10)" fg:x="636" fg:w="7"/><text x="72.8527%" y="399.50"></text></g><g><title>_int_malloc (7 samples, 0.80%)</title><rect x="72.6027%" y="373" width="0.7991%" height="15" fill="rgb(242,107,0)" fg:x="636" fg:w="7"/><text x="72.8527%" y="383.50"></text></g><g><title>unlink_chunk.isra.0 (1 samples, 0.11%)</title><rect x="73.2877%" y="357" width="0.1142%" height="15" fill="rgb(251,28,31)" fg:x="642" fg:w="1"/><text x="73.5377%" y="367.50"></text></g><g><title>_int_free (1 samples, 0.11%)</title><rect x="73.4018%" y="389" width="0.1142%" height="15" fill="rgb(233,223,10)" fg:x="643" fg:w="1"/><text x="73.6518%" y="399.50"></text></g><g><title>unlink_chunk.isra.0 (1 samples, 0.11%)</title><rect x="73.4018%" y="373" width="0.1142%" height="15" fill="rgb(215,21,27)" fg:x="643" fg:w="1"/><text x="73.6518%" y="383.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.11%)</title><rect x="73.5160%" y="389" width="0.1142%" height="15" fill="rgb(232,23,21)" fg:x="644" fg:w="1"/><text x="73.7660%" y="399.50"></text></g><g><title>exc_page_fault (1 samples, 0.11%)</title><rect x="73.5160%" y="373" width="0.1142%" height="15" fill="rgb(244,5,23)" fg:x="644" fg:w="1"/><text x="73.7660%" y="383.50"></text></g><g><title>irqentry_exit (1 samples, 0.11%)</title><rect x="73.5160%" y="357" width="0.1142%" height="15" fill="rgb(226,81,46)" fg:x="644" fg:w="1"/><text x="73.7660%" y="367.50"></text></g><g><title>irqentry_exit_to_user_mode (1 samples, 0.11%)</title><rect x="73.5160%" y="341" width="0.1142%" height="15" fill="rgb(247,70,30)" fg:x="644" fg:w="1"/><text x="73.7660%" y="351.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.11%)</title><rect x="73.6301%" y="389" width="0.1142%" height="15" fill="rgb(212,68,19)" fg:x="645" fg:w="1"/><text x="73.8801%" y="399.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.11%)</title><rect x="73.6301%" y="373" width="0.1142%" height="15" fill="rgb(240,187,13)" fg:x="645" fg:w="1"/><text x="73.8801%" y="383.50"></text></g><g><title>irqentry_exit (1 samples, 0.11%)</title><rect x="73.6301%" y="357" width="0.1142%" height="15" fill="rgb(223,113,26)" fg:x="645" fg:w="1"/><text x="73.8801%" y="367.50"></text></g><g><title>irqentry_exit_to_user_mode (1 samples, 0.11%)</title><rect x="73.6301%" y="341" width="0.1142%" height="15" fill="rgb(206,192,2)" fg:x="645" fg:w="1"/><text x="73.8801%" y="351.50"></text></g><g><title>exit_to_user_mode_prepare (1 samples, 0.11%)</title><rect x="73.6301%" y="325" width="0.1142%" height="15" fill="rgb(241,108,4)" fg:x="645" fg:w="1"/><text x="73.8801%" y="335.50"></text></g><g><title>schedule (1 samples, 0.11%)</title><rect x="73.6301%" y="309" width="0.1142%" height="15" fill="rgb(247,173,49)" fg:x="645" fg:w="1"/><text x="73.8801%" y="319.50"></text></g><g><title>__schedule (1 samples, 0.11%)</title><rect x="73.6301%" y="293" width="0.1142%" height="15" fill="rgb(224,114,35)" fg:x="645" fg:w="1"/><text x="73.8801%" y="303.50"></text></g><g><title>psi_task_switch (1 samples, 0.11%)</title><rect x="73.6301%" y="277" width="0.1142%" height="15" fill="rgb(245,159,27)" fg:x="645" fg:w="1"/><text x="73.8801%" y="287.50"></text></g><g><title>iterate_groups.isra.0 (1 samples, 0.11%)</title><rect x="73.6301%" y="261" width="0.1142%" height="15" fill="rgb(245,172,44)" fg:x="645" fg:w="1"/><text x="73.8801%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (61 samples, 6.96%)</title><rect x="70.4338%" y="405" width="6.9635%" height="15" fill="rgb(236,23,11)" fg:x="617" fg:w="61"/><text x="70.6838%" y="415.50">hashbrown..</text></g><g><title>core::hash::BuildHasher::hash_one (32 samples, 3.65%)</title><rect x="73.7443%" y="389" width="3.6530%" height="15" fill="rgb(205,117,38)" fg:x="646" fg:w="32"/><text x="73.9943%" y="399.50">core..</text></g><g><title>asm_sysvec_apic_timer_interrupt (6 samples, 0.68%)</title><rect x="77.9680%" y="245" width="0.6849%" height="15" fill="rgb(237,72,25)" fg:x="683" fg:w="6"/><text x="78.2180%" y="255.50"></text></g><g><title>sysvec_apic_timer_interrupt (6 samples, 0.68%)</title><rect x="77.9680%" y="229" width="0.6849%" height="15" fill="rgb(244,70,9)" fg:x="683" fg:w="6"/><text x="78.2180%" y="239.50"></text></g><g><title>irqentry_exit (6 samples, 0.68%)</title><rect x="77.9680%" y="213" width="0.6849%" height="15" fill="rgb(217,125,39)" fg:x="683" fg:w="6"/><text x="78.2180%" y="223.50"></text></g><g><title>irqentry_exit_to_user_mode (6 samples, 0.68%)</title><rect x="77.9680%" y="197" width="0.6849%" height="15" fill="rgb(235,36,10)" fg:x="683" fg:w="6"/><text x="78.2180%" y="207.50"></text></g><g><title>exit_to_user_mode_prepare (6 samples, 0.68%)</title><rect x="77.9680%" y="181" width="0.6849%" height="15" fill="rgb(251,123,47)" fg:x="683" fg:w="6"/><text x="78.2180%" y="191.50"></text></g><g><title>schedule (6 samples, 0.68%)</title><rect x="77.9680%" y="165" width="0.6849%" height="15" fill="rgb(221,13,13)" fg:x="683" fg:w="6"/><text x="78.2180%" y="175.50"></text></g><g><title>__schedule (6 samples, 0.68%)</title><rect x="77.9680%" y="149" width="0.6849%" height="15" fill="rgb(238,131,9)" fg:x="683" fg:w="6"/><text x="78.2180%" y="159.50"></text></g><g><title>finish_task_switch (6 samples, 0.68%)</title><rect x="77.9680%" y="133" width="0.6849%" height="15" fill="rgb(211,50,8)" fg:x="683" fg:w="6"/><text x="78.2180%" y="143.50"></text></g><g><title>__perf_event_task_sched_in (6 samples, 0.68%)</title><rect x="77.9680%" y="117" width="0.6849%" height="15" fill="rgb(245,182,24)" fg:x="683" fg:w="6"/><text x="78.2180%" y="127.50"></text></g><g><title>perf_pmu_enable.part.0 (6 samples, 0.68%)</title><rect x="77.9680%" y="101" width="0.6849%" height="15" fill="rgb(242,14,37)" fg:x="683" fg:w="6"/><text x="78.2180%" y="111.50"></text></g><g><title>x86_pmu_enable (6 samples, 0.68%)</title><rect x="77.9680%" y="85" width="0.6849%" height="15" fill="rgb(246,228,12)" fg:x="683" fg:w="6"/><text x="78.2180%" y="95.50"></text></g><g><title>intel_pmu_enable_all (6 samples, 0.68%)</title><rect x="77.9680%" y="69" width="0.6849%" height="15" fill="rgb(213,55,15)" fg:x="683" fg:w="6"/><text x="78.2180%" y="79.50"></text></g><g><title>native_write_msr (6 samples, 0.68%)</title><rect x="77.9680%" y="53" width="0.6849%" height="15" fill="rgb(209,9,3)" fg:x="683" fg:w="6"/><text x="78.2180%" y="63.50"></text></g><g><title>alloc::string::String::reserve (33 samples, 3.77%)</title><rect x="77.3973%" y="373" width="3.7671%" height="15" fill="rgb(230,59,30)" fg:x="678" fg:w="33"/><text x="77.6473%" y="383.50">allo..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (33 samples, 3.77%)</title><rect x="77.3973%" y="357" width="3.7671%" height="15" fill="rgb(209,121,21)" fg:x="678" fg:w="33"/><text x="77.6473%" y="367.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (33 samples, 3.77%)</title><rect x="77.3973%" y="341" width="3.7671%" height="15" fill="rgb(220,109,13)" fg:x="678" fg:w="33"/><text x="77.6473%" y="351.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (33 samples, 3.77%)</title><rect x="77.3973%" y="325" width="3.7671%" height="15" fill="rgb(232,18,1)" fg:x="678" fg:w="33"/><text x="77.6473%" y="335.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (33 samples, 3.77%)</title><rect x="77.3973%" y="309" width="3.7671%" height="15" fill="rgb(215,41,42)" fg:x="678" fg:w="33"/><text x="77.6473%" y="319.50">allo..</text></g><g><title>alloc::raw_vec::finish_grow (33 samples, 3.77%)</title><rect x="77.3973%" y="293" width="3.7671%" height="15" fill="rgb(224,123,36)" fg:x="678" fg:w="33"/><text x="77.6473%" y="303.50">allo..</text></g><g><title>__GI___libc_malloc (33 samples, 3.77%)</title><rect x="77.3973%" y="277" width="3.7671%" height="15" fill="rgb(240,125,3)" fg:x="678" fg:w="33"/><text x="77.6473%" y="287.50">__GI..</text></g><g><title>_int_malloc (32 samples, 3.65%)</title><rect x="77.5114%" y="261" width="3.6530%" height="15" fill="rgb(205,98,50)" fg:x="679" fg:w="32"/><text x="77.7614%" y="271.50">_int..</text></g><g><title>malloc_consolidate (22 samples, 2.51%)</title><rect x="78.6530%" y="245" width="2.5114%" height="15" fill="rgb(205,185,37)" fg:x="689" fg:w="22"/><text x="78.9030%" y="255.50">ma..</text></g><g><title>unlink_chunk.isra.0 (3 samples, 0.34%)</title><rect x="80.8219%" y="229" width="0.3425%" height="15" fill="rgb(238,207,15)" fg:x="708" fg:w="3"/><text x="81.0719%" y="239.50"></text></g><g><title>__vfs_getxattr (1 samples, 0.11%)</title><rect x="81.3927%" y="117" width="0.1142%" height="15" fill="rgb(213,199,42)" fg:x="713" fg:w="1"/><text x="81.6427%" y="127.50"></text></g><g><title>__audit_inode (2 samples, 0.23%)</title><rect x="81.3927%" y="165" width="0.2283%" height="15" fill="rgb(235,201,11)" fg:x="713" fg:w="2"/><text x="81.6427%" y="175.50"></text></g><g><title>audit_copy_inode (2 samples, 0.23%)</title><rect x="81.3927%" y="149" width="0.2283%" height="15" fill="rgb(207,46,11)" fg:x="713" fg:w="2"/><text x="81.6427%" y="159.50"></text></g><g><title>get_vfs_caps_from_disk (2 samples, 0.23%)</title><rect x="81.3927%" y="133" width="0.2283%" height="15" fill="rgb(241,35,35)" fg:x="713" fg:w="2"/><text x="81.6427%" y="143.50"></text></g><g><title>xattr_resolve_name (1 samples, 0.11%)</title><rect x="81.5068%" y="117" width="0.1142%" height="15" fill="rgb(243,32,47)" fg:x="714" fg:w="1"/><text x="81.7568%" y="127.50"></text></g><g><title>complete_walk (1 samples, 0.11%)</title><rect x="81.6210%" y="149" width="0.1142%" height="15" fill="rgb(247,202,23)" fg:x="715" fg:w="1"/><text x="81.8710%" y="159.50"></text></g><g><title>path_init (1 samples, 0.11%)</title><rect x="81.7352%" y="149" width="0.1142%" height="15" fill="rgb(219,102,11)" fg:x="716" fg:w="1"/><text x="81.9852%" y="159.50"></text></g><g><title>filename_lookup (7 samples, 0.80%)</title><rect x="81.1644%" y="181" width="0.7991%" height="15" fill="rgb(243,110,44)" fg:x="711" fg:w="7"/><text x="81.4144%" y="191.50"></text></g><g><title>path_lookupat.isra.0 (3 samples, 0.34%)</title><rect x="81.6210%" y="165" width="0.3425%" height="15" fill="rgb(222,74,54)" fg:x="715" fg:w="3"/><text x="81.8710%" y="175.50"></text></g><g><title>terminate_walk (1 samples, 0.11%)</title><rect x="81.8493%" y="149" width="0.1142%" height="15" fill="rgb(216,99,12)" fg:x="717" fg:w="1"/><text x="82.0993%" y="159.50"></text></g><g><title>__audit_getname (1 samples, 0.11%)</title><rect x="81.9635%" y="165" width="0.1142%" height="15" fill="rgb(226,22,26)" fg:x="718" fg:w="1"/><text x="82.2135%" y="175.50"></text></g><g><title>audit_alloc_name (1 samples, 0.11%)</title><rect x="81.9635%" y="149" width="0.1142%" height="15" fill="rgb(217,163,10)" fg:x="718" fg:w="1"/><text x="82.2135%" y="159.50"></text></g><g><title>user_path_at_empty (9 samples, 1.03%)</title><rect x="81.1644%" y="197" width="1.0274%" height="15" fill="rgb(213,25,53)" fg:x="711" fg:w="9"/><text x="81.4144%" y="207.50"></text></g><g><title>getname_flags (2 samples, 0.23%)</title><rect x="81.9635%" y="181" width="0.2283%" height="15" fill="rgb(252,105,26)" fg:x="718" fg:w="2"/><text x="82.2135%" y="191.50"></text></g><g><title>strncpy_from_user (1 samples, 0.11%)</title><rect x="82.0776%" y="165" width="0.1142%" height="15" fill="rgb(220,39,43)" fg:x="719" fg:w="1"/><text x="82.3276%" y="175.50"></text></g><g><title>__x64_sys_statx (10 samples, 1.14%)</title><rect x="81.1644%" y="245" width="1.1416%" height="15" fill="rgb(229,68,48)" fg:x="711" fg:w="10"/><text x="81.4144%" y="255.50"></text></g><g><title>do_statx (10 samples, 1.14%)</title><rect x="81.1644%" y="229" width="1.1416%" height="15" fill="rgb(252,8,32)" fg:x="711" fg:w="10"/><text x="81.4144%" y="239.50"></text></g><g><title>vfs_statx (10 samples, 1.14%)</title><rect x="81.1644%" y="213" width="1.1416%" height="15" fill="rgb(223,20,43)" fg:x="711" fg:w="10"/><text x="81.4144%" y="223.50"></text></g><g><title>vfs_getattr (1 samples, 0.11%)</title><rect x="82.1918%" y="197" width="0.1142%" height="15" fill="rgb(229,81,49)" fg:x="720" fg:w="1"/><text x="82.4418%" y="207.50"></text></g><g><title>security_inode_getattr (1 samples, 0.11%)</title><rect x="82.1918%" y="181" width="0.1142%" height="15" fill="rgb(236,28,36)" fg:x="720" fg:w="1"/><text x="82.4418%" y="191.50"></text></g><g><title>apparmor_inode_getattr (1 samples, 0.11%)</title><rect x="82.1918%" y="165" width="0.1142%" height="15" fill="rgb(249,185,26)" fg:x="720" fg:w="1"/><text x="82.4418%" y="175.50"></text></g><g><title>common_perm_cond (1 samples, 0.11%)</title><rect x="82.1918%" y="149" width="0.1142%" height="15" fill="rgb(249,174,33)" fg:x="720" fg:w="1"/><text x="82.4418%" y="159.50"></text></g><g><title>common_perm (1 samples, 0.11%)</title><rect x="82.1918%" y="133" width="0.1142%" height="15" fill="rgb(233,201,37)" fg:x="720" fg:w="1"/><text x="82.4418%" y="143.50"></text></g><g><title>syscall_enter_from_user_mode (2 samples, 0.23%)</title><rect x="82.3059%" y="245" width="0.2283%" height="15" fill="rgb(221,78,26)" fg:x="721" fg:w="2"/><text x="82.5559%" y="255.50"></text></g><g><title>syscall_trace_enter.isra.0 (2 samples, 0.23%)</title><rect x="82.3059%" y="229" width="0.2283%" height="15" fill="rgb(250,127,30)" fg:x="721" fg:w="2"/><text x="82.5559%" y="239.50"></text></g><g><title>__audit_syscall_entry (1 samples, 0.11%)</title><rect x="82.4201%" y="213" width="0.1142%" height="15" fill="rgb(230,49,44)" fg:x="722" fg:w="1"/><text x="82.6701%" y="223.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (15 samples, 1.71%)</title><rect x="81.1644%" y="277" width="1.7123%" height="15" fill="rgb(229,67,23)" fg:x="711" fg:w="15"/><text x="81.4144%" y="287.50"></text></g><g><title>do_syscall_64 (15 samples, 1.71%)</title><rect x="81.1644%" y="261" width="1.7123%" height="15" fill="rgb(249,83,47)" fg:x="711" fg:w="15"/><text x="81.4144%" y="271.50"></text></g><g><title>syscall_exit_to_user_mode (3 samples, 0.34%)</title><rect x="82.5342%" y="245" width="0.3425%" height="15" fill="rgb(215,43,3)" fg:x="723" fg:w="3"/><text x="82.7842%" y="255.50"></text></g><g><title>syscall_exit_work (1 samples, 0.11%)</title><rect x="82.7626%" y="229" width="0.1142%" height="15" fill="rgb(238,154,13)" fg:x="725" fg:w="1"/><text x="83.0126%" y="239.50"></text></g><g><title>__audit_syscall_exit (1 samples, 0.11%)</title><rect x="82.7626%" y="213" width="0.1142%" height="15" fill="rgb(219,56,2)" fg:x="725" fg:w="1"/><text x="83.0126%" y="223.50"></text></g><g><title>std::fs::File::metadata (16 samples, 1.83%)</title><rect x="81.1644%" y="357" width="1.8265%" height="15" fill="rgb(233,0,4)" fg:x="711" fg:w="16"/><text x="81.4144%" y="367.50">s..</text></g><g><title>std::sys::unix::fs::File::file_attr (16 samples, 1.83%)</title><rect x="81.1644%" y="341" width="1.8265%" height="15" fill="rgb(235,30,7)" fg:x="711" fg:w="16"/><text x="81.4144%" y="351.50">s..</text></g><g><title>std::sys::unix::fs::try_statx (16 samples, 1.83%)</title><rect x="81.1644%" y="325" width="1.8265%" height="15" fill="rgb(250,79,13)" fg:x="711" fg:w="16"/><text x="81.4144%" y="335.50">s..</text></g><g><title>std::sys::unix::fs::try_statx::statx (16 samples, 1.83%)</title><rect x="81.1644%" y="309" width="1.8265%" height="15" fill="rgb(211,146,34)" fg:x="711" fg:w="16"/><text x="81.4144%" y="319.50">s..</text></g><g><title>statx (16 samples, 1.83%)</title><rect x="81.1644%" y="293" width="1.8265%" height="15" fill="rgb(228,22,38)" fg:x="711" fg:w="16"/><text x="81.4144%" y="303.50">s..</text></g><g><title>syscall_return_via_sysret (1 samples, 0.11%)</title><rect x="82.8767%" y="277" width="0.1142%" height="15" fill="rgb(235,168,5)" fg:x="726" fg:w="1"/><text x="83.1267%" y="287.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.11%)</title><rect x="83.1050%" y="293" width="0.1142%" height="15" fill="rgb(221,155,16)" fg:x="728" fg:w="1"/><text x="83.3550%" y="303.50"></text></g><g><title>do_syscall_64 (1 samples, 0.11%)</title><rect x="83.1050%" y="277" width="0.1142%" height="15" fill="rgb(215,215,53)" fg:x="728" fg:w="1"/><text x="83.3550%" y="287.50"></text></g><g><title>syscall_exit_to_user_mode (1 samples, 0.11%)</title><rect x="83.1050%" y="261" width="0.1142%" height="15" fill="rgb(223,4,10)" fg:x="728" fg:w="1"/><text x="83.3550%" y="271.50"></text></g><g><title>syscall_exit_work (1 samples, 0.11%)</title><rect x="83.1050%" y="245" width="0.1142%" height="15" fill="rgb(234,103,6)" fg:x="728" fg:w="1"/><text x="83.3550%" y="255.50"></text></g><g><title>__audit_syscall_exit (1 samples, 0.11%)</title><rect x="83.1050%" y="229" width="0.1142%" height="15" fill="rgb(227,97,0)" fg:x="728" fg:w="1"/><text x="83.3550%" y="239.50"></text></g><g><title>audit_filter_inodes (1 samples, 0.11%)</title><rect x="83.1050%" y="213" width="0.1142%" height="15" fill="rgb(234,150,53)" fg:x="728" fg:w="1"/><text x="83.3550%" y="223.50"></text></g><g><title>auditd_test_task (1 samples, 0.11%)</title><rect x="83.1050%" y="197" width="0.1142%" height="15" fill="rgb(228,201,54)" fg:x="728" fg:w="1"/><text x="83.3550%" y="207.50"></text></g><g><title>__lseek64 (3 samples, 0.34%)</title><rect x="82.9909%" y="309" width="0.3425%" height="15" fill="rgb(222,22,37)" fg:x="727" fg:w="3"/><text x="83.2409%" y="319.50"></text></g><g><title>syscall_return_via_sysret (1 samples, 0.11%)</title><rect x="83.2192%" y="293" width="0.1142%" height="15" fill="rgb(237,53,32)" fg:x="729" fg:w="1"/><text x="83.4692%" y="303.50"></text></g><g><title>std::fs::buffer_capacity_required (20 samples, 2.28%)</title><rect x="81.1644%" y="373" width="2.2831%" height="15" fill="rgb(233,25,53)" fg:x="711" fg:w="20"/><text x="81.4144%" y="383.50">s..</text></g><g><title>std::io::Seek::stream_position (4 samples, 0.46%)</title><rect x="82.9909%" y="357" width="0.4566%" height="15" fill="rgb(210,40,34)" fg:x="727" fg:w="4"/><text x="83.2409%" y="367.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Seek&gt;::seek (4 samples, 0.46%)</title><rect x="82.9909%" y="341" width="0.4566%" height="15" fill="rgb(241,220,44)" fg:x="727" fg:w="4"/><text x="83.2409%" y="351.50"></text></g><g><title>std::sys::unix::fs::File::seek (4 samples, 0.46%)</title><rect x="82.9909%" y="325" width="0.4566%" height="15" fill="rgb(235,28,35)" fg:x="727" fg:w="4"/><text x="83.2409%" y="335.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.11%)</title><rect x="83.3333%" y="309" width="0.1142%" height="15" fill="rgb(210,56,17)" fg:x="730" fg:w="1"/><text x="83.5833%" y="319.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.11%)</title><rect x="83.3333%" y="293" width="0.1142%" height="15" fill="rgb(224,130,29)" fg:x="730" fg:w="1"/><text x="83.5833%" y="303.50"></text></g><g><title>statx (1 samples, 0.11%)</title><rect x="83.3333%" y="277" width="0.1142%" height="15" fill="rgb(235,212,8)" fg:x="730" fg:w="1"/><text x="83.5833%" y="287.50"></text></g><g><title>__entry_text_start (1 samples, 0.11%)</title><rect x="83.3333%" y="261" width="0.1142%" height="15" fill="rgb(223,33,50)" fg:x="730" fg:w="1"/><text x="83.5833%" y="271.50"></text></g><g><title>core::str::converts::from_utf8 (63 samples, 7.19%)</title><rect x="83.4475%" y="341" width="7.1918%" height="15" fill="rgb(219,149,13)" fg:x="731" fg:w="63"/><text x="83.6975%" y="351.50">core::str:..</text></g><g><title>core::str::validations::run_utf8_validation (63 samples, 7.19%)</title><rect x="83.4475%" y="325" width="7.1918%" height="15" fill="rgb(250,156,29)" fg:x="731" fg:w="63"/><text x="83.6975%" y="335.50">core::str:..</text></g><g><title>core::str::validations::utf8_char_width (13 samples, 1.48%)</title><rect x="89.1553%" y="309" width="1.4840%" height="15" fill="rgb(216,193,19)" fg:x="781" fg:w="13"/><text x="89.4053%" y="319.50"></text></g><g><title>new_sync_read (1 samples, 0.11%)</title><rect x="90.8676%" y="165" width="0.1142%" height="15" fill="rgb(216,135,14)" fg:x="796" fg:w="1"/><text x="91.1176%" y="175.50"></text></g><g><title>ext4_file_read_iter (1 samples, 0.11%)</title><rect x="90.8676%" y="149" width="0.1142%" height="15" fill="rgb(241,47,5)" fg:x="796" fg:w="1"/><text x="91.1176%" y="159.50"></text></g><g><title>generic_file_read_iter (1 samples, 0.11%)</title><rect x="90.8676%" y="133" width="0.1142%" height="15" fill="rgb(233,42,35)" fg:x="796" fg:w="1"/><text x="91.1176%" y="143.50"></text></g><g><title>filemap_read (1 samples, 0.11%)</title><rect x="90.8676%" y="117" width="0.1142%" height="15" fill="rgb(231,13,6)" fg:x="796" fg:w="1"/><text x="91.1176%" y="127.50"></text></g><g><title>filemap_get_pages (1 samples, 0.11%)</title><rect x="90.8676%" y="101" width="0.1142%" height="15" fill="rgb(207,181,40)" fg:x="796" fg:w="1"/><text x="91.1176%" y="111.50"></text></g><g><title>filemap_get_read_batch (1 samples, 0.11%)</title><rect x="90.8676%" y="85" width="0.1142%" height="15" fill="rgb(254,173,49)" fg:x="796" fg:w="1"/><text x="91.1176%" y="95.50"></text></g><g><title>__x64_sys_read (3 samples, 0.34%)</title><rect x="90.7534%" y="213" width="0.3425%" height="15" fill="rgb(221,1,38)" fg:x="795" fg:w="3"/><text x="91.0034%" y="223.50"></text></g><g><title>ksys_read (3 samples, 0.34%)</title><rect x="90.7534%" y="197" width="0.3425%" height="15" fill="rgb(206,124,46)" fg:x="795" fg:w="3"/><text x="91.0034%" y="207.50"></text></g><g><title>vfs_read (2 samples, 0.23%)</title><rect x="90.8676%" y="181" width="0.2283%" height="15" fill="rgb(249,21,11)" fg:x="796" fg:w="2"/><text x="91.1176%" y="191.50"></text></g><g><title>rw_verify_area (1 samples, 0.11%)</title><rect x="90.9817%" y="165" width="0.1142%" height="15" fill="rgb(222,201,40)" fg:x="797" fg:w="1"/><text x="91.2317%" y="175.50"></text></g><g><title>security_file_permission (1 samples, 0.11%)</title><rect x="90.9817%" y="149" width="0.1142%" height="15" fill="rgb(235,61,29)" fg:x="797" fg:w="1"/><text x="91.2317%" y="159.50"></text></g><g><title>syscall_enter_from_user_mode (1 samples, 0.11%)</title><rect x="91.0959%" y="213" width="0.1142%" height="15" fill="rgb(219,207,3)" fg:x="798" fg:w="1"/><text x="91.3459%" y="223.50"></text></g><g><title>syscall_trace_enter.isra.0 (1 samples, 0.11%)</title><rect x="91.0959%" y="197" width="0.1142%" height="15" fill="rgb(222,56,46)" fg:x="798" fg:w="1"/><text x="91.3459%" y="207.50"></text></g><g><title>__audit_syscall_entry (1 samples, 0.11%)</title><rect x="91.0959%" y="181" width="0.1142%" height="15" fill="rgb(239,76,54)" fg:x="798" fg:w="1"/><text x="91.3459%" y="191.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (6 samples, 0.68%)</title><rect x="90.7534%" y="245" width="0.6849%" height="15" fill="rgb(231,124,27)" fg:x="795" fg:w="6"/><text x="91.0034%" y="255.50"></text></g><g><title>do_syscall_64 (6 samples, 0.68%)</title><rect x="90.7534%" y="229" width="0.6849%" height="15" fill="rgb(249,195,6)" fg:x="795" fg:w="6"/><text x="91.0034%" y="239.50"></text></g><g><title>syscall_exit_to_user_mode (2 samples, 0.23%)</title><rect x="91.2100%" y="213" width="0.2283%" height="15" fill="rgb(237,174,47)" fg:x="799" fg:w="2"/><text x="91.4600%" y="223.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (10 samples, 1.14%)</title><rect x="90.6393%" y="309" width="1.1416%" height="15" fill="rgb(206,201,31)" fg:x="794" fg:w="10"/><text x="90.8893%" y="319.50"></text></g><g><title>std::sys::unix::fs::File::read (10 samples, 1.14%)</title><rect x="90.6393%" y="293" width="1.1416%" height="15" fill="rgb(231,57,52)" fg:x="794" fg:w="10"/><text x="90.8893%" y="303.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (10 samples, 1.14%)</title><rect x="90.6393%" y="277" width="1.1416%" height="15" fill="rgb(248,177,22)" fg:x="794" fg:w="10"/><text x="90.8893%" y="287.50"></text></g><g><title>__libc_read (10 samples, 1.14%)</title><rect x="90.6393%" y="261" width="1.1416%" height="15" fill="rgb(215,211,37)" fg:x="794" fg:w="10"/><text x="90.8893%" y="271.50"></text></g><g><title>syscall_return_via_sysret (3 samples, 0.34%)</title><rect x="91.4384%" y="245" width="0.3425%" height="15" fill="rgb(241,128,51)" fg:x="801" fg:w="3"/><text x="91.6884%" y="255.50"></text></g><g><title>copy_page_to_iter (6 samples, 0.68%)</title><rect x="92.1233%" y="101" width="0.6849%" height="15" fill="rgb(227,165,31)" fg:x="807" fg:w="6"/><text x="92.3733%" y="111.50"></text></g><g><title>copy_user_enhanced_fast_string (6 samples, 0.68%)</title><rect x="92.1233%" y="85" width="0.6849%" height="15" fill="rgb(228,167,24)" fg:x="807" fg:w="6"/><text x="92.3733%" y="95.50"></text></g><g><title>__x64_sys_read (10 samples, 1.14%)</title><rect x="91.7808%" y="213" width="1.1416%" height="15" fill="rgb(228,143,12)" fg:x="804" fg:w="10"/><text x="92.0308%" y="223.50"></text></g><g><title>ksys_read (10 samples, 1.14%)</title><rect x="91.7808%" y="197" width="1.1416%" height="15" fill="rgb(249,149,8)" fg:x="804" fg:w="10"/><text x="92.0308%" y="207.50"></text></g><g><title>vfs_read (9 samples, 1.03%)</title><rect x="91.8950%" y="181" width="1.0274%" height="15" fill="rgb(243,35,44)" fg:x="805" fg:w="9"/><text x="92.1450%" y="191.50"></text></g><g><title>new_sync_read (8 samples, 0.91%)</title><rect x="92.0091%" y="165" width="0.9132%" height="15" fill="rgb(246,89,9)" fg:x="806" fg:w="8"/><text x="92.2591%" y="175.50"></text></g><g><title>ext4_file_read_iter (8 samples, 0.91%)</title><rect x="92.0091%" y="149" width="0.9132%" height="15" fill="rgb(233,213,13)" fg:x="806" fg:w="8"/><text x="92.2591%" y="159.50"></text></g><g><title>generic_file_read_iter (8 samples, 0.91%)</title><rect x="92.0091%" y="133" width="0.9132%" height="15" fill="rgb(233,141,41)" fg:x="806" fg:w="8"/><text x="92.2591%" y="143.50"></text></g><g><title>filemap_read (8 samples, 0.91%)</title><rect x="92.0091%" y="117" width="0.9132%" height="15" fill="rgb(239,167,4)" fg:x="806" fg:w="8"/><text x="92.2591%" y="127.50"></text></g><g><title>touch_atime (1 samples, 0.11%)</title><rect x="92.8082%" y="101" width="0.1142%" height="15" fill="rgb(209,217,16)" fg:x="813" fg:w="1"/><text x="93.0582%" y="111.50"></text></g><g><title>atime_needs_update (1 samples, 0.11%)</title><rect x="92.8082%" y="85" width="0.1142%" height="15" fill="rgb(219,88,35)" fg:x="813" fg:w="1"/><text x="93.0582%" y="95.50"></text></g><g><title>current_time (1 samples, 0.11%)</title><rect x="92.8082%" y="69" width="0.1142%" height="15" fill="rgb(220,193,23)" fg:x="813" fg:w="1"/><text x="93.0582%" y="79.50"></text></g><g><title>do_syscall_64 (11 samples, 1.26%)</title><rect x="91.7808%" y="229" width="1.2557%" height="15" fill="rgb(230,90,52)" fg:x="804" fg:w="11"/><text x="92.0308%" y="239.50"></text></g><g><title>syscall_exit_to_user_mode (1 samples, 0.11%)</title><rect x="92.9224%" y="213" width="0.1142%" height="15" fill="rgb(252,106,19)" fg:x="814" fg:w="1"/><text x="93.1724%" y="223.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (12 samples, 1.37%)</title><rect x="91.7808%" y="245" width="1.3699%" height="15" fill="rgb(206,74,20)" fg:x="804" fg:w="12"/><text x="92.0308%" y="255.50"></text></g><g><title>syscall_exit_to_user_mode (1 samples, 0.11%)</title><rect x="93.0365%" y="229" width="0.1142%" height="15" fill="rgb(230,138,44)" fg:x="815" fg:w="1"/><text x="93.2865%" y="239.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_to_string (140 samples, 15.98%)</title><rect x="77.3973%" y="389" width="15.9817%" height="15" fill="rgb(235,182,43)" fg:x="678" fg:w="140"/><text x="77.6473%" y="399.50">&lt;std::fs::File as std::io..</text></g><g><title>std::io::default_read_to_string (87 samples, 9.93%)</title><rect x="83.4475%" y="373" width="9.9315%" height="15" fill="rgb(242,16,51)" fg:x="731" fg:w="87"/><text x="83.6975%" y="383.50">std::io::defau..</text></g><g><title>std::io::append_to_string (87 samples, 9.93%)</title><rect x="83.4475%" y="357" width="9.9315%" height="15" fill="rgb(248,9,4)" fg:x="731" fg:w="87"/><text x="83.6975%" y="367.50">std::io::appen..</text></g><g><title>std::io::default_read_to_string::{{closure}} (24 samples, 2.74%)</title><rect x="90.6393%" y="341" width="2.7397%" height="15" fill="rgb(210,31,22)" fg:x="794" fg:w="24"/><text x="90.8893%" y="351.50">st..</text></g><g><title>std::io::default_read_to_end (24 samples, 2.74%)</title><rect x="90.6393%" y="325" width="2.7397%" height="15" fill="rgb(239,54,39)" fg:x="794" fg:w="24"/><text x="90.8893%" y="335.50">st..</text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (14 samples, 1.60%)</title><rect x="91.7808%" y="309" width="1.5982%" height="15" fill="rgb(230,99,41)" fg:x="804" fg:w="14"/><text x="92.0308%" y="319.50"></text></g><g><title>std::sys::unix::fs::File::read_buf (14 samples, 1.60%)</title><rect x="91.7808%" y="293" width="1.5982%" height="15" fill="rgb(253,106,12)" fg:x="804" fg:w="14"/><text x="92.0308%" y="303.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read_buf (14 samples, 1.60%)</title><rect x="91.7808%" y="277" width="1.5982%" height="15" fill="rgb(213,46,41)" fg:x="804" fg:w="14"/><text x="92.0308%" y="287.50"></text></g><g><title>__libc_read (14 samples, 1.60%)</title><rect x="91.7808%" y="261" width="1.5982%" height="15" fill="rgb(215,133,35)" fg:x="804" fg:w="14"/><text x="92.0308%" y="271.50"></text></g><g><title>syscall_return_via_sysret (2 samples, 0.23%)</title><rect x="93.1507%" y="245" width="0.2283%" height="15" fill="rgb(213,28,5)" fg:x="816" fg:w="2"/><text x="93.4007%" y="255.50"></text></g><g><title>close_fd (1 samples, 0.11%)</title><rect x="93.6073%" y="341" width="0.1142%" height="15" fill="rgb(215,77,49)" fg:x="820" fg:w="1"/><text x="93.8573%" y="351.50"></text></g><g><title>__fsnotify_parent (1 samples, 0.11%)</title><rect x="94.0639%" y="261" width="0.1142%" height="15" fill="rgb(248,100,22)" fg:x="824" fg:w="1"/><text x="94.3139%" y="271.50"></text></g><g><title>exit_to_user_mode_prepare (3 samples, 0.34%)</title><rect x="94.0639%" y="325" width="0.3425%" height="15" fill="rgb(208,67,9)" fg:x="824" fg:w="3"/><text x="94.3139%" y="335.50"></text></g><g><title>task_work_run (3 samples, 0.34%)</title><rect x="94.0639%" y="309" width="0.3425%" height="15" fill="rgb(219,133,21)" fg:x="824" fg:w="3"/><text x="94.3139%" y="319.50"></text></g><g><title>____fput (3 samples, 0.34%)</title><rect x="94.0639%" y="293" width="0.3425%" height="15" fill="rgb(246,46,29)" fg:x="824" fg:w="3"/><text x="94.3139%" y="303.50"></text></g><g><title>__fput (3 samples, 0.34%)</title><rect x="94.0639%" y="277" width="0.3425%" height="15" fill="rgb(246,185,52)" fg:x="824" fg:w="3"/><text x="94.3139%" y="287.50"></text></g><g><title>ext4_release_file (2 samples, 0.23%)</title><rect x="94.1781%" y="261" width="0.2283%" height="15" fill="rgb(252,136,11)" fg:x="825" fg:w="2"/><text x="94.4281%" y="271.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (8 samples, 0.91%)</title><rect x="93.6073%" y="373" width="0.9132%" height="15" fill="rgb(219,138,53)" fg:x="820" fg:w="8"/><text x="93.8573%" y="383.50"></text></g><g><title>do_syscall_64 (8 samples, 0.91%)</title><rect x="93.6073%" y="357" width="0.9132%" height="15" fill="rgb(211,51,23)" fg:x="820" fg:w="8"/><text x="93.8573%" y="367.50"></text></g><g><title>syscall_exit_to_user_mode (7 samples, 0.80%)</title><rect x="93.7215%" y="341" width="0.7991%" height="15" fill="rgb(247,221,28)" fg:x="821" fg:w="7"/><text x="93.9715%" y="351.50"></text></g><g><title>syscall_exit_work (1 samples, 0.11%)</title><rect x="94.4064%" y="325" width="0.1142%" height="15" fill="rgb(251,222,45)" fg:x="827" fg:w="1"/><text x="94.6564%" y="335.50"></text></g><g><title>__audit_syscall_exit (1 samples, 0.11%)</title><rect x="94.4064%" y="309" width="0.1142%" height="15" fill="rgb(217,162,53)" fg:x="827" fg:w="1"/><text x="94.6564%" y="319.50"></text></g><g><title>__close (11 samples, 1.26%)</title><rect x="93.3790%" y="389" width="1.2557%" height="15" fill="rgb(229,93,14)" fg:x="818" fg:w="11"/><text x="93.6290%" y="399.50"></text></g><g><title>syscall_return_via_sysret (1 samples, 0.11%)</title><rect x="94.5205%" y="373" width="0.1142%" height="15" fill="rgb(209,67,49)" fg:x="828" fg:w="1"/><text x="94.7705%" y="383.50"></text></g><g><title>__x64_sys_openat (1 samples, 0.11%)</title><rect x="94.8630%" y="245" width="0.1142%" height="15" fill="rgb(213,87,29)" fg:x="831" fg:w="1"/><text x="95.1130%" y="255.50"></text></g><g><title>kmem_cache_alloc (2 samples, 0.23%)</title><rect x="95.0913%" y="117" width="0.2283%" height="15" fill="rgb(205,151,52)" fg:x="833" fg:w="2"/><text x="95.3413%" y="127.50"></text></g><g><title>get_obj_cgroup_from_current (1 samples, 0.11%)</title><rect x="95.2055%" y="101" width="0.1142%" height="15" fill="rgb(253,215,39)" fg:x="834" fg:w="1"/><text x="95.4555%" y="111.50"></text></g><g><title>alloc_empty_file (4 samples, 0.46%)</title><rect x="94.9772%" y="149" width="0.4566%" height="15" fill="rgb(221,220,41)" fg:x="832" fg:w="4"/><text x="95.2272%" y="159.50"></text></g><g><title>__alloc_file (4 samples, 0.46%)</title><rect x="94.9772%" y="133" width="0.4566%" height="15" fill="rgb(218,133,21)" fg:x="832" fg:w="4"/><text x="95.2272%" y="143.50"></text></g><g><title>security_file_alloc (1 samples, 0.11%)</title><rect x="95.3196%" y="117" width="0.1142%" height="15" fill="rgb(221,193,43)" fg:x="835" fg:w="1"/><text x="95.5696%" y="127.50"></text></g><g><title>kmem_cache_alloc (1 samples, 0.11%)</title><rect x="95.3196%" y="101" width="0.1142%" height="15" fill="rgb(240,128,52)" fg:x="835" fg:w="1"/><text x="95.5696%" y="111.50"></text></g><g><title>should_failslab (1 samples, 0.11%)</title><rect x="95.3196%" y="85" width="0.1142%" height="15" fill="rgb(253,114,12)" fg:x="835" fg:w="1"/><text x="95.5696%" y="95.50"></text></g><g><title>__audit_inode (4 samples, 0.46%)</title><rect x="95.4338%" y="133" width="0.4566%" height="15" fill="rgb(215,223,47)" fg:x="836" fg:w="4"/><text x="95.6838%" y="143.50"></text></g><g><title>audit_copy_inode (2 samples, 0.23%)</title><rect x="95.6621%" y="117" width="0.2283%" height="15" fill="rgb(248,225,23)" fg:x="838" fg:w="2"/><text x="95.9121%" y="127.50"></text></g><g><title>get_vfs_caps_from_disk (2 samples, 0.23%)</title><rect x="95.6621%" y="101" width="0.2283%" height="15" fill="rgb(250,108,0)" fg:x="838" fg:w="2"/><text x="95.9121%" y="111.50"></text></g><g><title>__vfs_getxattr (2 samples, 0.23%)</title><rect x="95.6621%" y="85" width="0.2283%" height="15" fill="rgb(228,208,7)" fg:x="838" fg:w="2"/><text x="95.9121%" y="95.50"></text></g><g><title>ext4_xattr_security_get (2 samples, 0.23%)</title><rect x="95.6621%" y="69" width="0.2283%" height="15" fill="rgb(244,45,10)" fg:x="838" fg:w="2"/><text x="95.9121%" y="79.50"></text></g><g><title>ext4_xattr_get (2 samples, 0.23%)</title><rect x="95.6621%" y="53" width="0.2283%" height="15" fill="rgb(207,125,25)" fg:x="838" fg:w="2"/><text x="95.9121%" y="63.50"></text></g><g><title>down_read (1 samples, 0.11%)</title><rect x="95.7763%" y="37" width="0.1142%" height="15" fill="rgb(210,195,18)" fg:x="839" fg:w="1"/><text x="96.0263%" y="47.50"></text></g><g><title>may_open (1 samples, 0.11%)</title><rect x="95.8904%" y="133" width="0.1142%" height="15" fill="rgb(249,80,12)" fg:x="840" fg:w="1"/><text x="96.1404%" y="143.50"></text></g><g><title>inode_permission (1 samples, 0.11%)</title><rect x="95.8904%" y="117" width="0.1142%" height="15" fill="rgb(221,65,9)" fg:x="840" fg:w="1"/><text x="96.1404%" y="127.50"></text></g><g><title>security_inode_permission (1 samples, 0.11%)</title><rect x="95.8904%" y="101" width="0.1142%" height="15" fill="rgb(235,49,36)" fg:x="840" fg:w="1"/><text x="96.1404%" y="111.50"></text></g><g><title>do_open.isra.0 (9 samples, 1.03%)</title><rect x="95.4338%" y="149" width="1.0274%" height="15" fill="rgb(225,32,20)" fg:x="836" fg:w="9"/><text x="95.6838%" y="159.50"></text></g><g><title>vfs_open (4 samples, 0.46%)</title><rect x="96.0046%" y="133" width="0.4566%" height="15" fill="rgb(215,141,46)" fg:x="841" fg:w="4"/><text x="96.2546%" y="143.50"></text></g><g><title>do_dentry_open (4 samples, 0.46%)</title><rect x="96.0046%" y="117" width="0.4566%" height="15" fill="rgb(250,160,47)" fg:x="841" fg:w="4"/><text x="96.2546%" y="127.50"></text></g><g><title>security_file_open (2 samples, 0.23%)</title><rect x="96.2329%" y="101" width="0.2283%" height="15" fill="rgb(216,222,40)" fg:x="843" fg:w="2"/><text x="96.4829%" y="111.50"></text></g><g><title>__fsnotify_parent (1 samples, 0.11%)</title><rect x="96.3470%" y="85" width="0.1142%" height="15" fill="rgb(234,217,39)" fg:x="844" fg:w="1"/><text x="96.5970%" y="95.50"></text></g><g><title>fsnotify (1 samples, 0.11%)</title><rect x="96.3470%" y="69" width="0.1142%" height="15" fill="rgb(207,178,40)" fg:x="844" fg:w="1"/><text x="96.5970%" y="79.50"></text></g><g><title>link_path_walk.part.0 (5 samples, 0.57%)</title><rect x="96.4612%" y="149" width="0.5708%" height="15" fill="rgb(221,136,13)" fg:x="845" fg:w="5"/><text x="96.7112%" y="159.50"></text></g><g><title>inode_permission (1 samples, 0.11%)</title><rect x="96.9178%" y="133" width="0.1142%" height="15" fill="rgb(249,199,10)" fg:x="849" fg:w="1"/><text x="97.1678%" y="143.50"></text></g><g><title>do_filp_open (19 samples, 2.17%)</title><rect x="94.9772%" y="181" width="2.1689%" height="15" fill="rgb(249,222,13)" fg:x="832" fg:w="19"/><text x="95.2272%" y="191.50">d..</text></g><g><title>path_openat (19 samples, 2.17%)</title><rect x="94.9772%" y="165" width="2.1689%" height="15" fill="rgb(244,185,38)" fg:x="832" fg:w="19"/><text x="95.2272%" y="175.50">p..</text></g><g><title>terminate_walk (1 samples, 0.11%)</title><rect x="97.0320%" y="149" width="0.1142%" height="15" fill="rgb(236,202,9)" fg:x="850" fg:w="1"/><text x="97.2820%" y="159.50"></text></g><g><title>mntput (1 samples, 0.11%)</title><rect x="97.0320%" y="133" width="0.1142%" height="15" fill="rgb(250,229,37)" fg:x="850" fg:w="1"/><text x="97.2820%" y="143.50"></text></g><g><title>mntput_no_expire (1 samples, 0.11%)</title><rect x="97.0320%" y="117" width="0.1142%" height="15" fill="rgb(206,174,23)" fg:x="850" fg:w="1"/><text x="97.2820%" y="127.50"></text></g><g><title>__x64_sys_openat (20 samples, 2.28%)</title><rect x="94.9772%" y="229" width="2.2831%" height="15" fill="rgb(211,33,43)" fg:x="832" fg:w="20"/><text x="95.2272%" y="239.50">_..</text></g><g><title>do_sys_open (20 samples, 2.28%)</title><rect x="94.9772%" y="213" width="2.2831%" height="15" fill="rgb(245,58,50)" fg:x="832" fg:w="20"/><text x="95.2272%" y="223.50">d..</text></g><g><title>do_sys_openat2 (20 samples, 2.28%)</title><rect x="94.9772%" y="197" width="2.2831%" height="15" fill="rgb(244,68,36)" fg:x="832" fg:w="20"/><text x="95.2272%" y="207.50">d..</text></g><g><title>getname (1 samples, 0.11%)</title><rect x="97.1461%" y="181" width="0.1142%" height="15" fill="rgb(232,229,15)" fg:x="851" fg:w="1"/><text x="97.3961%" y="191.50"></text></g><g><title>getname_flags (1 samples, 0.11%)</title><rect x="97.1461%" y="165" width="0.1142%" height="15" fill="rgb(254,30,23)" fg:x="851" fg:w="1"/><text x="97.3961%" y="175.50"></text></g><g><title>memset_erms (1 samples, 0.11%)</title><rect x="97.1461%" y="149" width="0.1142%" height="15" fill="rgb(235,160,14)" fg:x="851" fg:w="1"/><text x="97.3961%" y="159.50"></text></g><g><title>exit_to_user_mode_prepare (1 samples, 0.11%)</title><rect x="97.6027%" y="213" width="0.1142%" height="15" fill="rgb(212,155,44)" fg:x="855" fg:w="1"/><text x="97.8527%" y="223.50"></text></g><g><title>audit_filter_inodes (1 samples, 0.11%)</title><rect x="97.7169%" y="181" width="0.1142%" height="15" fill="rgb(226,2,50)" fg:x="856" fg:w="1"/><text x="97.9669%" y="191.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (28 samples, 3.20%)</title><rect x="94.7489%" y="261" width="3.1963%" height="15" fill="rgb(234,177,6)" fg:x="830" fg:w="28"/><text x="94.9989%" y="271.50">ent..</text></g><g><title>do_syscall_64 (26 samples, 2.97%)</title><rect x="94.9772%" y="245" width="2.9680%" height="15" fill="rgb(217,24,9)" fg:x="832" fg:w="26"/><text x="95.2272%" y="255.50">do_..</text></g><g><title>syscall_exit_to_user_mode (6 samples, 0.68%)</title><rect x="97.2603%" y="229" width="0.6849%" height="15" fill="rgb(220,13,46)" fg:x="852" fg:w="6"/><text x="97.5103%" y="239.50"></text></g><g><title>syscall_exit_work (2 samples, 0.23%)</title><rect x="97.7169%" y="213" width="0.2283%" height="15" fill="rgb(239,221,27)" fg:x="856" fg:w="2"/><text x="97.9669%" y="223.50"></text></g><g><title>__audit_syscall_exit (2 samples, 0.23%)</title><rect x="97.7169%" y="197" width="0.2283%" height="15" fill="rgb(222,198,25)" fg:x="856" fg:w="2"/><text x="97.9669%" y="207.50"></text></g><g><title>putname (1 samples, 0.11%)</title><rect x="97.8311%" y="181" width="0.1142%" height="15" fill="rgb(211,99,13)" fg:x="857" fg:w="1"/><text x="98.0811%" y="191.50"></text></g><g><title>kmem_cache_free (1 samples, 0.11%)</title><rect x="97.8311%" y="165" width="0.1142%" height="15" fill="rgb(232,111,31)" fg:x="857" fg:w="1"/><text x="98.0811%" y="175.50"></text></g><g><title>std::fs::read_to_string::inner (182 samples, 20.78%)</title><rect x="77.3973%" y="405" width="20.7763%" height="15" fill="rgb(245,82,37)" fg:x="678" fg:w="182"/><text x="77.6473%" y="415.50">std::fs::read_to_string::inner</text></g><g><title>std::fs::File::open (31 samples, 3.54%)</title><rect x="94.6347%" y="389" width="3.5388%" height="15" fill="rgb(227,149,46)" fg:x="829" fg:w="31"/><text x="94.8847%" y="399.50">std..</text></g><g><title>std::fs::OpenOptions::open (31 samples, 3.54%)</title><rect x="94.6347%" y="373" width="3.5388%" height="15" fill="rgb(218,36,50)" fg:x="829" fg:w="31"/><text x="94.8847%" y="383.50">std..</text></g><g><title>std::fs::OpenOptions::_open (31 samples, 3.54%)</title><rect x="94.6347%" y="357" width="3.5388%" height="15" fill="rgb(226,80,48)" fg:x="829" fg:w="31"/><text x="94.8847%" y="367.50">std..</text></g><g><title>std::sys::unix::fs::File::open (31 samples, 3.54%)</title><rect x="94.6347%" y="341" width="3.5388%" height="15" fill="rgb(238,224,15)" fg:x="829" fg:w="31"/><text x="94.8847%" y="351.50">std..</text></g><g><title>std::sys::unix::fs::File::open_c (31 samples, 3.54%)</title><rect x="94.6347%" y="325" width="3.5388%" height="15" fill="rgb(241,136,10)" fg:x="829" fg:w="31"/><text x="94.8847%" y="335.50">std..</text></g><g><title>std::sys::unix::cvt_r (31 samples, 3.54%)</title><rect x="94.6347%" y="309" width="3.5388%" height="15" fill="rgb(208,32,45)" fg:x="829" fg:w="31"/><text x="94.8847%" y="319.50">std..</text></g><g><title>std::sys::unix::fs::File::open_c::{{closure}} (31 samples, 3.54%)</title><rect x="94.6347%" y="293" width="3.5388%" height="15" fill="rgb(207,135,9)" fg:x="829" fg:w="31"/><text x="94.8847%" y="303.50">std..</text></g><g><title>__libc_open64 (31 samples, 3.54%)</title><rect x="94.6347%" y="277" width="3.5388%" height="15" fill="rgb(206,86,44)" fg:x="829" fg:w="31"/><text x="94.8847%" y="287.50">__l..</text></g><g><title>syscall_return_via_sysret (2 samples, 0.23%)</title><rect x="97.9452%" y="261" width="0.2283%" height="15" fill="rgb(245,177,15)" fg:x="858" fg:w="2"/><text x="98.1952%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.11%)</title><rect x="98.1735%" y="293" width="0.1142%" height="15" fill="rgb(206,64,50)" fg:x="860" fg:w="1"/><text x="98.4235%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.11%)</title><rect x="98.1735%" y="277" width="0.1142%" height="15" fill="rgb(234,36,40)" fg:x="860" fg:w="1"/><text x="98.4235%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.11%)</title><rect x="98.1735%" y="261" width="0.1142%" height="15" fill="rgb(213,64,8)" fg:x="860" fg:w="1"/><text x="98.4235%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.11%)</title><rect x="98.1735%" y="245" width="0.1142%" height="15" fill="rgb(210,75,36)" fg:x="860" fg:w="1"/><text x="98.4235%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.11%)</title><rect x="98.1735%" y="229" width="0.1142%" height="15" fill="rgb(229,88,21)" fg:x="860" fg:w="1"/><text x="98.4235%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.11%)</title><rect x="98.1735%" y="213" width="0.1142%" height="15" fill="rgb(252,204,47)" fg:x="860" fg:w="1"/><text x="98.4235%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.11%)</title><rect x="98.1735%" y="197" width="0.1142%" height="15" fill="rgb(208,77,27)" fg:x="860" fg:w="1"/><text x="98.4235%" y="207.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.11%)</title><rect x="98.1735%" y="181" width="0.1142%" height="15" fill="rgb(221,76,26)" fg:x="860" fg:w="1"/><text x="98.4235%" y="191.50"></text></g><g><title>std::sys::unix::fs::cstr (2 samples, 0.23%)</title><rect x="98.1735%" y="357" width="0.2283%" height="15" fill="rgb(225,139,18)" fg:x="860" fg:w="2"/><text x="98.4235%" y="367.50"></text></g><g><title>alloc::ffi::c_str::CString::new (2 samples, 0.23%)</title><rect x="98.1735%" y="341" width="0.2283%" height="15" fill="rgb(230,137,11)" fg:x="860" fg:w="2"/><text x="98.4235%" y="351.50"></text></g><g><title>&lt;&amp;[u8] as alloc::ffi::c_str::CString::new::SpecNewImpl&gt;::spec_new_impl (2 samples, 0.23%)</title><rect x="98.1735%" y="325" width="0.2283%" height="15" fill="rgb(212,28,1)" fg:x="860" fg:w="2"/><text x="98.4235%" y="335.50"></text></g><g><title>alloc::ffi::c_str::CString::new::spec_new_impl_bytes (2 samples, 0.23%)</title><rect x="98.1735%" y="309" width="0.2283%" height="15" fill="rgb(248,164,17)" fg:x="860" fg:w="2"/><text x="98.4235%" y="319.50"></text></g><g><title>core::slice::memchr::memchr (1 samples, 0.11%)</title><rect x="98.2877%" y="293" width="0.1142%" height="15" fill="rgb(222,171,42)" fg:x="861" fg:w="1"/><text x="98.5377%" y="303.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1 samples, 0.11%)</title><rect x="98.2877%" y="277" width="0.1142%" height="15" fill="rgb(243,84,45)" fg:x="861" fg:w="1"/><text x="98.5377%" y="287.50"></text></g><g><title>libc::unix::linux_like::linux::makedev (1 samples, 0.11%)</title><rect x="98.4018%" y="341" width="0.1142%" height="15" fill="rgb(252,49,23)" fg:x="862" fg:w="1"/><text x="98.6518%" y="351.50"></text></g><g><title>cp_statx (1 samples, 0.11%)</title><rect x="98.5160%" y="245" width="0.1142%" height="15" fill="rgb(215,19,7)" fg:x="863" fg:w="1"/><text x="98.7660%" y="255.50"></text></g><g><title>__audit_inode (1 samples, 0.11%)</title><rect x="98.6301%" y="197" width="0.1142%" height="15" fill="rgb(238,81,41)" fg:x="864" fg:w="1"/><text x="98.8801%" y="207.50"></text></g><g><title>audit_copy_inode (1 samples, 0.11%)</title><rect x="98.6301%" y="181" width="0.1142%" height="15" fill="rgb(210,199,37)" fg:x="864" fg:w="1"/><text x="98.8801%" y="191.50"></text></g><g><title>get_vfs_caps_from_disk (1 samples, 0.11%)</title><rect x="98.6301%" y="165" width="0.1142%" height="15" fill="rgb(244,192,49)" fg:x="864" fg:w="1"/><text x="98.8801%" y="175.50"></text></g><g><title>__vfs_getxattr (1 samples, 0.11%)</title><rect x="98.6301%" y="149" width="0.1142%" height="15" fill="rgb(226,211,11)" fg:x="864" fg:w="1"/><text x="98.8801%" y="159.50"></text></g><g><title>ext4_xattr_security_get (1 samples, 0.11%)</title><rect x="98.6301%" y="133" width="0.1142%" height="15" fill="rgb(236,162,54)" fg:x="864" fg:w="1"/><text x="98.8801%" y="143.50"></text></g><g><title>ext4_xattr_get (1 samples, 0.11%)</title><rect x="98.6301%" y="117" width="0.1142%" height="15" fill="rgb(220,229,9)" fg:x="864" fg:w="1"/><text x="98.8801%" y="127.50"></text></g><g><title>down_read (1 samples, 0.11%)</title><rect x="98.6301%" y="101" width="0.1142%" height="15" fill="rgb(250,87,22)" fg:x="864" fg:w="1"/><text x="98.8801%" y="111.50"></text></g><g><title>complete_walk (1 samples, 0.11%)</title><rect x="98.7443%" y="181" width="0.1142%" height="15" fill="rgb(239,43,17)" fg:x="865" fg:w="1"/><text x="98.9943%" y="191.50"></text></g><g><title>try_to_unlazy (1 samples, 0.11%)</title><rect x="98.7443%" y="165" width="0.1142%" height="15" fill="rgb(231,177,25)" fg:x="865" fg:w="1"/><text x="98.9943%" y="175.50"></text></g><g><title>__legitimize_path.isra.0 (1 samples, 0.11%)</title><rect x="98.7443%" y="149" width="0.1142%" height="15" fill="rgb(219,179,1)" fg:x="865" fg:w="1"/><text x="98.9943%" y="159.50"></text></g><g><title>lockref_get_not_dead (1 samples, 0.11%)</title><rect x="98.7443%" y="133" width="0.1142%" height="15" fill="rgb(238,219,53)" fg:x="865" fg:w="1"/><text x="98.9943%" y="143.50"></text></g><g><title>handle_dots.part.0 (1 samples, 0.11%)</title><rect x="98.8584%" y="149" width="0.1142%" height="15" fill="rgb(232,167,36)" fg:x="866" fg:w="1"/><text x="99.1084%" y="159.50"></text></g><g><title>filename_lookup (4 samples, 0.46%)</title><rect x="98.6301%" y="213" width="0.4566%" height="15" fill="rgb(244,19,51)" fg:x="864" fg:w="4"/><text x="98.8801%" y="223.50"></text></g><g><title>path_lookupat.isra.0 (3 samples, 0.34%)</title><rect x="98.7443%" y="197" width="0.3425%" height="15" fill="rgb(224,6,22)" fg:x="865" fg:w="3"/><text x="98.9943%" y="207.50"></text></g><g><title>link_path_walk.part.0 (2 samples, 0.23%)</title><rect x="98.8584%" y="181" width="0.2283%" height="15" fill="rgb(224,145,5)" fg:x="866" fg:w="2"/><text x="99.1084%" y="191.50"></text></g><g><title>walk_component (2 samples, 0.23%)</title><rect x="98.8584%" y="165" width="0.2283%" height="15" fill="rgb(234,130,49)" fg:x="866" fg:w="2"/><text x="99.1084%" y="175.50"></text></g><g><title>lookup_fast (1 samples, 0.11%)</title><rect x="98.9726%" y="149" width="0.1142%" height="15" fill="rgb(254,6,2)" fg:x="867" fg:w="1"/><text x="99.2226%" y="159.50"></text></g><g><title>__d_lookup_rcu (1 samples, 0.11%)</title><rect x="98.9726%" y="133" width="0.1142%" height="15" fill="rgb(208,96,46)" fg:x="867" fg:w="1"/><text x="99.2226%" y="143.50"></text></g><g><title>__x64_sys_statx (6 samples, 0.68%)</title><rect x="98.5160%" y="277" width="0.6849%" height="15" fill="rgb(239,3,39)" fg:x="863" fg:w="6"/><text x="98.7660%" y="287.50"></text></g><g><title>do_statx (6 samples, 0.68%)</title><rect x="98.5160%" y="261" width="0.6849%" height="15" fill="rgb(233,210,1)" fg:x="863" fg:w="6"/><text x="98.7660%" y="271.50"></text></g><g><title>vfs_statx (5 samples, 0.57%)</title><rect x="98.6301%" y="245" width="0.5708%" height="15" fill="rgb(244,137,37)" fg:x="864" fg:w="5"/><text x="98.8801%" y="255.50"></text></g><g><title>user_path_at_empty (5 samples, 0.57%)</title><rect x="98.6301%" y="229" width="0.5708%" height="15" fill="rgb(240,136,2)" fg:x="864" fg:w="5"/><text x="98.8801%" y="239.50"></text></g><g><title>getname_flags (1 samples, 0.11%)</title><rect x="99.0868%" y="213" width="0.1142%" height="15" fill="rgb(239,18,37)" fg:x="868" fg:w="1"/><text x="99.3368%" y="223.50"></text></g><g><title>strncpy_from_user (1 samples, 0.11%)</title><rect x="99.0868%" y="197" width="0.1142%" height="15" fill="rgb(218,185,22)" fg:x="868" fg:w="1"/><text x="99.3368%" y="207.50"></text></g><g><title>syscall_enter_from_user_mode (1 samples, 0.11%)</title><rect x="99.2009%" y="277" width="0.1142%" height="15" fill="rgb(225,218,4)" fg:x="869" fg:w="1"/><text x="99.4509%" y="287.50"></text></g><g><title>syscall_trace_enter.isra.0 (1 samples, 0.11%)</title><rect x="99.2009%" y="261" width="0.1142%" height="15" fill="rgb(230,182,32)" fg:x="869" fg:w="1"/><text x="99.4509%" y="271.50"></text></g><g><title>__libc_start_main (808 samples, 92.24%)</title><rect x="7.3059%" y="645" width="92.2374%" height="15" fill="rgb(242,56,43)" fg:x="64" fg:w="808"/><text x="7.5559%" y="655.50">__libc_start_main</text></g><g><title>main (808 samples, 92.24%)</title><rect x="7.3059%" y="629" width="92.2374%" height="15" fill="rgb(233,99,24)" fg:x="64" fg:w="808"/><text x="7.5559%" y="639.50">main</text></g><g><title>std::rt::lang_start_internal (808 samples, 92.24%)</title><rect x="7.3059%" y="613" width="92.2374%" height="15" fill="rgb(234,209,42)" fg:x="64" fg:w="808"/><text x="7.5559%" y="623.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (808 samples, 92.24%)</title><rect x="7.3059%" y="597" width="92.2374%" height="15" fill="rgb(227,7,12)" fg:x="64" fg:w="808"/><text x="7.5559%" y="607.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (808 samples, 92.24%)</title><rect x="7.3059%" y="581" width="92.2374%" height="15" fill="rgb(245,203,43)" fg:x="64" fg:w="808"/><text x="7.5559%" y="591.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (808 samples, 92.24%)</title><rect x="7.3059%" y="565" width="92.2374%" height="15" fill="rgb(238,205,33)" fg:x="64" fg:w="808"/><text x="7.5559%" y="575.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (808 samples, 92.24%)</title><rect x="7.3059%" y="549" width="92.2374%" height="15" fill="rgb(231,56,7)" fg:x="64" fg:w="808"/><text x="7.5559%" y="559.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (808 samples, 92.24%)</title><rect x="7.3059%" y="533" width="92.2374%" height="15" fill="rgb(244,186,29)" fg:x="64" fg:w="808"/><text x="7.5559%" y="543.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (808 samples, 92.24%)</title><rect x="7.3059%" y="517" width="92.2374%" height="15" fill="rgb(234,111,31)" fg:x="64" fg:w="808"/><text x="7.5559%" y="527.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (808 samples, 92.24%)</title><rect x="7.3059%" y="501" width="92.2374%" height="15" fill="rgb(241,149,10)" fg:x="64" fg:w="808"/><text x="7.5559%" y="511.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (808 samples, 92.24%)</title><rect x="7.3059%" y="485" width="92.2374%" height="15" fill="rgb(249,206,44)" fg:x="64" fg:w="808"/><text x="7.5559%" y="495.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (808 samples, 92.24%)</title><rect x="7.3059%" y="469" width="92.2374%" height="15" fill="rgb(251,153,30)" fg:x="64" fg:w="808"/><text x="7.5559%" y="479.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (808 samples, 92.24%)</title><rect x="7.3059%" y="453" width="92.2374%" height="15" fill="rgb(239,152,38)" fg:x="64" fg:w="808"/><text x="7.5559%" y="463.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>tf_df::main (808 samples, 92.24%)</title><rect x="7.3059%" y="437" width="92.2374%" height="15" fill="rgb(249,139,47)" fg:x="64" fg:w="808"/><text x="7.5559%" y="447.50">tf_df::main</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (806 samples, 92.01%)</title><rect x="7.5342%" y="421" width="92.0091%" height="15" fill="rgb(244,64,35)" fg:x="66" fg:w="806"/><text x="7.7842%" y="431.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold</text></g><g><title>std::path::Path::is_dir (12 samples, 1.37%)</title><rect x="98.1735%" y="405" width="1.3699%" height="15" fill="rgb(216,46,15)" fg:x="860" fg:w="12"/><text x="98.4235%" y="415.50"></text></g><g><title>std::fs::metadata (12 samples, 1.37%)</title><rect x="98.1735%" y="389" width="1.3699%" height="15" fill="rgb(250,74,19)" fg:x="860" fg:w="12"/><text x="98.4235%" y="399.50"></text></g><g><title>std::sys::unix::fs::stat (12 samples, 1.37%)</title><rect x="98.1735%" y="373" width="1.3699%" height="15" fill="rgb(249,42,33)" fg:x="860" fg:w="12"/><text x="98.4235%" y="383.50"></text></g><g><title>std::sys::unix::fs::try_statx (10 samples, 1.14%)</title><rect x="98.4018%" y="357" width="1.1416%" height="15" fill="rgb(242,149,17)" fg:x="862" fg:w="10"/><text x="98.6518%" y="367.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (9 samples, 1.03%)</title><rect x="98.5160%" y="341" width="1.0274%" height="15" fill="rgb(244,29,21)" fg:x="863" fg:w="9"/><text x="98.7660%" y="351.50"></text></g><g><title>statx (9 samples, 1.03%)</title><rect x="98.5160%" y="325" width="1.0274%" height="15" fill="rgb(220,130,37)" fg:x="863" fg:w="9"/><text x="98.7660%" y="335.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (9 samples, 1.03%)</title><rect x="98.5160%" y="309" width="1.0274%" height="15" fill="rgb(211,67,2)" fg:x="863" fg:w="9"/><text x="98.7660%" y="319.50"></text></g><g><title>do_syscall_64 (9 samples, 1.03%)</title><rect x="98.5160%" y="293" width="1.0274%" height="15" fill="rgb(235,68,52)" fg:x="863" fg:w="9"/><text x="98.7660%" y="303.50"></text></g><g><title>syscall_exit_to_user_mode (2 samples, 0.23%)</title><rect x="99.3151%" y="277" width="0.2283%" height="15" fill="rgb(246,142,3)" fg:x="870" fg:w="2"/><text x="99.5651%" y="287.50"></text></g><g><title>syscall_exit_work (1 samples, 0.11%)</title><rect x="99.4292%" y="261" width="0.1142%" height="15" fill="rgb(241,25,7)" fg:x="871" fg:w="1"/><text x="99.6792%" y="271.50"></text></g><g><title>__audit_syscall_exit (1 samples, 0.11%)</title><rect x="99.4292%" y="245" width="0.1142%" height="15" fill="rgb(242,119,39)" fg:x="871" fg:w="1"/><text x="99.6792%" y="255.50"></text></g><g><title>audit_filter_inodes (1 samples, 0.11%)</title><rect x="99.4292%" y="229" width="0.1142%" height="15" fill="rgb(241,98,45)" fg:x="871" fg:w="1"/><text x="99.6792%" y="239.50"></text></g><g><title>_start (809 samples, 92.35%)</title><rect x="7.3059%" y="661" width="92.3516%" height="15" fill="rgb(254,28,30)" fg:x="64" fg:w="809"/><text x="7.5559%" y="671.50">_start</text></g><g><title>_dl_start (1 samples, 0.11%)</title><rect x="99.5434%" y="645" width="0.1142%" height="15" fill="rgb(241,142,54)" fg:x="872" fg:w="1"/><text x="99.7934%" y="655.50"></text></g><g><title>[ld-2.31.so] (1 samples, 0.11%)</title><rect x="99.5434%" y="629" width="0.1142%" height="15" fill="rgb(222,85,15)" fg:x="872" fg:w="1"/><text x="99.7934%" y="639.50"></text></g><g><title>[ld-2.31.so] (1 samples, 0.11%)</title><rect x="99.5434%" y="613" width="0.1142%" height="15" fill="rgb(210,85,47)" fg:x="872" fg:w="1"/><text x="99.7934%" y="623.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.11%)</title><rect x="99.5434%" y="597" width="0.1142%" height="15" fill="rgb(224,206,25)" fg:x="872" fg:w="1"/><text x="99.7934%" y="607.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.11%)</title><rect x="99.5434%" y="581" width="0.1142%" height="15" fill="rgb(243,201,19)" fg:x="872" fg:w="1"/><text x="99.7934%" y="591.50"></text></g><g><title>openaux (1 samples, 0.11%)</title><rect x="99.5434%" y="565" width="0.1142%" height="15" fill="rgb(236,59,4)" fg:x="872" fg:w="1"/><text x="99.7934%" y="575.50"></text></g><g><title>_dl_map_object (1 samples, 0.11%)</title><rect x="99.5434%" y="549" width="0.1142%" height="15" fill="rgb(254,179,45)" fg:x="872" fg:w="1"/><text x="99.7934%" y="559.50"></text></g><g><title>_dl_map_object_from_fd (1 samples, 0.11%)</title><rect x="99.5434%" y="533" width="0.1142%" height="15" fill="rgb(226,14,10)" fg:x="872" fg:w="1"/><text x="99.7934%" y="543.50"></text></g><g><title>__mmap (1 samples, 0.11%)</title><rect x="99.5434%" y="517" width="0.1142%" height="15" fill="rgb(244,27,41)" fg:x="872" fg:w="1"/><text x="99.7934%" y="527.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.11%)</title><rect x="99.5434%" y="501" width="0.1142%" height="15" fill="rgb(235,35,32)" fg:x="872" fg:w="1"/><text x="99.7934%" y="511.50"></text></g><g><title>do_syscall_64 (1 samples, 0.11%)</title><rect x="99.5434%" y="485" width="0.1142%" height="15" fill="rgb(218,68,31)" fg:x="872" fg:w="1"/><text x="99.7934%" y="495.50"></text></g><g><title>__x64_sys_mmap (1 samples, 0.11%)</title><rect x="99.5434%" y="469" width="0.1142%" height="15" fill="rgb(207,120,37)" fg:x="872" fg:w="1"/><text x="99.7934%" y="479.50"></text></g><g><title>ksys_mmap_pgoff (1 samples, 0.11%)</title><rect x="99.5434%" y="453" width="0.1142%" height="15" fill="rgb(227,98,0)" fg:x="872" fg:w="1"/><text x="99.7934%" y="463.50"></text></g><g><title>vm_mmap_pgoff (1 samples, 0.11%)</title><rect x="99.5434%" y="437" width="0.1142%" height="15" fill="rgb(207,7,3)" fg:x="872" fg:w="1"/><text x="99.7934%" y="447.50"></text></g><g><title>do_mmap (1 samples, 0.11%)</title><rect x="99.5434%" y="421" width="0.1142%" height="15" fill="rgb(206,98,19)" fg:x="872" fg:w="1"/><text x="99.7934%" y="431.50"></text></g><g><title>mmap_region (1 samples, 0.11%)</title><rect x="99.5434%" y="405" width="0.1142%" height="15" fill="rgb(217,5,26)" fg:x="872" fg:w="1"/><text x="99.7934%" y="415.50"></text></g><g><title>vma_link (1 samples, 0.11%)</title><rect x="99.5434%" y="389" width="0.1142%" height="15" fill="rgb(235,190,38)" fg:x="872" fg:w="1"/><text x="99.7934%" y="399.50"></text></g><g><title>__vma_link_file (1 samples, 0.11%)</title><rect x="99.5434%" y="373" width="0.1142%" height="15" fill="rgb(247,86,24)" fg:x="872" fg:w="1"/><text x="99.7934%" y="383.50"></text></g><g><title>vma_interval_tree_insert (1 samples, 0.11%)</title><rect x="99.5434%" y="357" width="0.1142%" height="15" fill="rgb(205,101,16)" fg:x="872" fg:w="1"/><text x="99.7934%" y="367.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.11%)</title><rect x="99.6575%" y="661" width="0.1142%" height="15" fill="rgb(246,168,33)" fg:x="873" fg:w="1"/><text x="99.9075%" y="671.50"></text></g><g><title>do_syscall_64 (1 samples, 0.11%)</title><rect x="99.6575%" y="645" width="0.1142%" height="15" fill="rgb(231,114,1)" fg:x="873" fg:w="1"/><text x="99.9075%" y="655.50"></text></g><g><title>__x64_sys_execve (1 samples, 0.11%)</title><rect x="99.6575%" y="629" width="0.1142%" height="15" fill="rgb(207,184,53)" fg:x="873" fg:w="1"/><text x="99.9075%" y="639.50"></text></g><g><title>do_execveat_common.isra.0 (1 samples, 0.11%)</title><rect x="99.6575%" y="613" width="0.1142%" height="15" fill="rgb(224,95,51)" fg:x="873" fg:w="1"/><text x="99.9075%" y="623.50"></text></g><g><title>bprm_execve (1 samples, 0.11%)</title><rect x="99.6575%" y="597" width="0.1142%" height="15" fill="rgb(212,188,45)" fg:x="873" fg:w="1"/><text x="99.9075%" y="607.50"></text></g><g><title>exec_binprm (1 samples, 0.11%)</title><rect x="99.6575%" y="581" width="0.1142%" height="15" fill="rgb(223,154,38)" fg:x="873" fg:w="1"/><text x="99.9075%" y="591.50"></text></g><g><title>load_elf_binary (1 samples, 0.11%)</title><rect x="99.6575%" y="565" width="0.1142%" height="15" fill="rgb(251,22,52)" fg:x="873" fg:w="1"/><text x="99.9075%" y="575.50"></text></g><g><title>setup_new_exec (1 samples, 0.11%)</title><rect x="99.6575%" y="549" width="0.1142%" height="15" fill="rgb(229,209,22)" fg:x="873" fg:w="1"/><text x="99.9075%" y="559.50"></text></g><g><title>all (876 samples, 100%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(234,138,34)" fg:x="0" fg:w="876"/><text x="0.2500%" y="703.50"></text></g><g><title>tf-df (871 samples, 99.43%)</title><rect x="0.5708%" y="677" width="99.4292%" height="15" fill="rgb(212,95,11)" fg:x="5" fg:w="871"/><text x="0.8208%" y="687.50">tf-df</text></g><g><title>entry_SYSCALL_64_safe_stack (2 samples, 0.23%)</title><rect x="99.7717%" y="661" width="0.2283%" height="15" fill="rgb(240,179,47)" fg:x="874" fg:w="2"/><text x="100.0217%" y="671.50"></text></g></svg></svg>